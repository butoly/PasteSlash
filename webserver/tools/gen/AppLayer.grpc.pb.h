// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: AppLayer.proto
#ifndef GRPC_AppLayer_2eproto__INCLUDED
#define GRPC_AppLayer_2eproto__INCLUDED

#include "AppLayer.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

class AppLayer final {
 public:
  static constexpr char const* service_full_name() {
    return "AppLayer";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status AuthUser(::grpc::ClientContext* context, const ::User& request, ::Token* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Token>> AsyncAuthUser(::grpc::ClientContext* context, const ::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Token>>(AsyncAuthUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Token>> PrepareAsyncAuthUser(::grpc::ClientContext* context, const ::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Token>>(PrepareAsyncAuthUserRaw(context, request, cq));
    }
    virtual ::grpc::Status RegUser(::grpc::ClientContext* context, const ::User& request, ::Token* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Token>> AsyncRegUser(::grpc::ClientContext* context, const ::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Token>>(AsyncRegUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Token>> PrepareAsyncRegUser(::grpc::ClientContext* context, const ::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Token>>(PrepareAsyncRegUserRaw(context, request, cq));
    }
    virtual ::grpc::Status StoreCode(::grpc::ClientContext* context, const ::Code& request, ::Hash* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Hash>> AsyncStoreCode(::grpc::ClientContext* context, const ::Code& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Hash>>(AsyncStoreCodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Hash>> PrepareAsyncStoreCode(::grpc::ClientContext* context, const ::Code& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Hash>>(PrepareAsyncStoreCodeRaw(context, request, cq));
    }
    virtual ::grpc::Status GetCode(::grpc::ClientContext* context, const ::Hash& request, ::Code* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Code>> AsyncGetCode(::grpc::ClientContext* context, const ::Hash& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Code>>(AsyncGetCodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Code>> PrepareAsyncGetCode(::grpc::ClientContext* context, const ::Hash& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Code>>(PrepareAsyncGetCodeRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteCode(::grpc::ClientContext* context, const ::Hash& request, ::Error* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Error>> AsyncDeleteCode(::grpc::ClientContext* context, const ::Hash& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Error>>(AsyncDeleteCodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Error>> PrepareAsyncDeleteCode(::grpc::ClientContext* context, const ::Hash& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Error>>(PrepareAsyncDeleteCodeRaw(context, request, cq));
    }
    virtual ::grpc::Status GetAllHashes(::grpc::ClientContext* context, const ::User& request, ::Hashes* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Hashes>> AsyncGetAllHashes(::grpc::ClientContext* context, const ::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Hashes>>(AsyncGetAllHashesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Hashes>> PrepareAsyncGetAllHashes(::grpc::ClientContext* context, const ::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Hashes>>(PrepareAsyncGetAllHashesRaw(context, request, cq));
    }
    virtual ::grpc::Status CheckToken(::grpc::ClientContext* context, const ::Token& request, ::AccessToken* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AccessToken>> AsyncCheckToken(::grpc::ClientContext* context, const ::Token& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AccessToken>>(AsyncCheckTokenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AccessToken>> PrepareAsyncCheckToken(::grpc::ClientContext* context, const ::Token& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AccessToken>>(PrepareAsyncCheckTokenRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void AuthUser(::grpc::ClientContext* context, const ::User* request, ::Token* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AuthUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Token* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AuthUser(::grpc::ClientContext* context, const ::User* request, ::Token* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AuthUser(::grpc::ClientContext* context, const ::User* request, ::Token* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AuthUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Token* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AuthUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Token* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void RegUser(::grpc::ClientContext* context, const ::User* request, ::Token* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RegUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Token* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RegUser(::grpc::ClientContext* context, const ::User* request, ::Token* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RegUser(::grpc::ClientContext* context, const ::User* request, ::Token* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RegUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Token* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RegUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Token* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void StoreCode(::grpc::ClientContext* context, const ::Code* request, ::Hash* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StoreCode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Hash* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void StoreCode(::grpc::ClientContext* context, const ::Code* request, ::Hash* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void StoreCode(::grpc::ClientContext* context, const ::Code* request, ::Hash* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void StoreCode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Hash* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void StoreCode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Hash* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetCode(::grpc::ClientContext* context, const ::Hash* request, ::Code* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Code* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetCode(::grpc::ClientContext* context, const ::Hash* request, ::Code* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetCode(::grpc::ClientContext* context, const ::Hash* request, ::Code* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetCode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Code* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetCode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Code* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void DeleteCode(::grpc::ClientContext* context, const ::Hash* request, ::Error* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteCode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Error* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteCode(::grpc::ClientContext* context, const ::Hash* request, ::Error* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteCode(::grpc::ClientContext* context, const ::Hash* request, ::Error* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeleteCode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Error* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeleteCode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Error* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetAllHashes(::grpc::ClientContext* context, const ::User* request, ::Hashes* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAllHashes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Hashes* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetAllHashes(::grpc::ClientContext* context, const ::User* request, ::Hashes* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetAllHashes(::grpc::ClientContext* context, const ::User* request, ::Hashes* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetAllHashes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Hashes* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetAllHashes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Hashes* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void CheckToken(::grpc::ClientContext* context, const ::Token* request, ::AccessToken* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CheckToken(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AccessToken* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CheckToken(::grpc::ClientContext* context, const ::Token* request, ::AccessToken* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CheckToken(::grpc::ClientContext* context, const ::Token* request, ::AccessToken* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CheckToken(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AccessToken* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CheckToken(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AccessToken* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Token>* AsyncAuthUserRaw(::grpc::ClientContext* context, const ::User& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Token>* PrepareAsyncAuthUserRaw(::grpc::ClientContext* context, const ::User& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Token>* AsyncRegUserRaw(::grpc::ClientContext* context, const ::User& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Token>* PrepareAsyncRegUserRaw(::grpc::ClientContext* context, const ::User& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Hash>* AsyncStoreCodeRaw(::grpc::ClientContext* context, const ::Code& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Hash>* PrepareAsyncStoreCodeRaw(::grpc::ClientContext* context, const ::Code& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Code>* AsyncGetCodeRaw(::grpc::ClientContext* context, const ::Hash& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Code>* PrepareAsyncGetCodeRaw(::grpc::ClientContext* context, const ::Hash& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Error>* AsyncDeleteCodeRaw(::grpc::ClientContext* context, const ::Hash& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Error>* PrepareAsyncDeleteCodeRaw(::grpc::ClientContext* context, const ::Hash& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Hashes>* AsyncGetAllHashesRaw(::grpc::ClientContext* context, const ::User& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Hashes>* PrepareAsyncGetAllHashesRaw(::grpc::ClientContext* context, const ::User& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::AccessToken>* AsyncCheckTokenRaw(::grpc::ClientContext* context, const ::Token& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::AccessToken>* PrepareAsyncCheckTokenRaw(::grpc::ClientContext* context, const ::Token& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status AuthUser(::grpc::ClientContext* context, const ::User& request, ::Token* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Token>> AsyncAuthUser(::grpc::ClientContext* context, const ::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Token>>(AsyncAuthUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Token>> PrepareAsyncAuthUser(::grpc::ClientContext* context, const ::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Token>>(PrepareAsyncAuthUserRaw(context, request, cq));
    }
    ::grpc::Status RegUser(::grpc::ClientContext* context, const ::User& request, ::Token* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Token>> AsyncRegUser(::grpc::ClientContext* context, const ::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Token>>(AsyncRegUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Token>> PrepareAsyncRegUser(::grpc::ClientContext* context, const ::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Token>>(PrepareAsyncRegUserRaw(context, request, cq));
    }
    ::grpc::Status StoreCode(::grpc::ClientContext* context, const ::Code& request, ::Hash* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Hash>> AsyncStoreCode(::grpc::ClientContext* context, const ::Code& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Hash>>(AsyncStoreCodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Hash>> PrepareAsyncStoreCode(::grpc::ClientContext* context, const ::Code& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Hash>>(PrepareAsyncStoreCodeRaw(context, request, cq));
    }
    ::grpc::Status GetCode(::grpc::ClientContext* context, const ::Hash& request, ::Code* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Code>> AsyncGetCode(::grpc::ClientContext* context, const ::Hash& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Code>>(AsyncGetCodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Code>> PrepareAsyncGetCode(::grpc::ClientContext* context, const ::Hash& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Code>>(PrepareAsyncGetCodeRaw(context, request, cq));
    }
    ::grpc::Status DeleteCode(::grpc::ClientContext* context, const ::Hash& request, ::Error* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Error>> AsyncDeleteCode(::grpc::ClientContext* context, const ::Hash& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Error>>(AsyncDeleteCodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Error>> PrepareAsyncDeleteCode(::grpc::ClientContext* context, const ::Hash& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Error>>(PrepareAsyncDeleteCodeRaw(context, request, cq));
    }
    ::grpc::Status GetAllHashes(::grpc::ClientContext* context, const ::User& request, ::Hashes* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Hashes>> AsyncGetAllHashes(::grpc::ClientContext* context, const ::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Hashes>>(AsyncGetAllHashesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Hashes>> PrepareAsyncGetAllHashes(::grpc::ClientContext* context, const ::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Hashes>>(PrepareAsyncGetAllHashesRaw(context, request, cq));
    }
    ::grpc::Status CheckToken(::grpc::ClientContext* context, const ::Token& request, ::AccessToken* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AccessToken>> AsyncCheckToken(::grpc::ClientContext* context, const ::Token& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AccessToken>>(AsyncCheckTokenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AccessToken>> PrepareAsyncCheckToken(::grpc::ClientContext* context, const ::Token& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AccessToken>>(PrepareAsyncCheckTokenRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void AuthUser(::grpc::ClientContext* context, const ::User* request, ::Token* response, std::function<void(::grpc::Status)>) override;
      void AuthUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Token* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AuthUser(::grpc::ClientContext* context, const ::User* request, ::Token* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AuthUser(::grpc::ClientContext* context, const ::User* request, ::Token* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AuthUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Token* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AuthUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Token* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void RegUser(::grpc::ClientContext* context, const ::User* request, ::Token* response, std::function<void(::grpc::Status)>) override;
      void RegUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Token* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RegUser(::grpc::ClientContext* context, const ::User* request, ::Token* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RegUser(::grpc::ClientContext* context, const ::User* request, ::Token* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RegUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Token* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RegUser(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Token* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void StoreCode(::grpc::ClientContext* context, const ::Code* request, ::Hash* response, std::function<void(::grpc::Status)>) override;
      void StoreCode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Hash* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void StoreCode(::grpc::ClientContext* context, const ::Code* request, ::Hash* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void StoreCode(::grpc::ClientContext* context, const ::Code* request, ::Hash* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void StoreCode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Hash* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void StoreCode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Hash* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetCode(::grpc::ClientContext* context, const ::Hash* request, ::Code* response, std::function<void(::grpc::Status)>) override;
      void GetCode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Code* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetCode(::grpc::ClientContext* context, const ::Hash* request, ::Code* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetCode(::grpc::ClientContext* context, const ::Hash* request, ::Code* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetCode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Code* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetCode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Code* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeleteCode(::grpc::ClientContext* context, const ::Hash* request, ::Error* response, std::function<void(::grpc::Status)>) override;
      void DeleteCode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Error* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteCode(::grpc::ClientContext* context, const ::Hash* request, ::Error* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteCode(::grpc::ClientContext* context, const ::Hash* request, ::Error* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeleteCode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Error* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeleteCode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Error* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetAllHashes(::grpc::ClientContext* context, const ::User* request, ::Hashes* response, std::function<void(::grpc::Status)>) override;
      void GetAllHashes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Hashes* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetAllHashes(::grpc::ClientContext* context, const ::User* request, ::Hashes* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetAllHashes(::grpc::ClientContext* context, const ::User* request, ::Hashes* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetAllHashes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Hashes* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetAllHashes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Hashes* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void CheckToken(::grpc::ClientContext* context, const ::Token* request, ::AccessToken* response, std::function<void(::grpc::Status)>) override;
      void CheckToken(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AccessToken* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CheckToken(::grpc::ClientContext* context, const ::Token* request, ::AccessToken* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CheckToken(::grpc::ClientContext* context, const ::Token* request, ::AccessToken* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CheckToken(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AccessToken* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CheckToken(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AccessToken* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::Token>* AsyncAuthUserRaw(::grpc::ClientContext* context, const ::User& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Token>* PrepareAsyncAuthUserRaw(::grpc::ClientContext* context, const ::User& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Token>* AsyncRegUserRaw(::grpc::ClientContext* context, const ::User& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Token>* PrepareAsyncRegUserRaw(::grpc::ClientContext* context, const ::User& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Hash>* AsyncStoreCodeRaw(::grpc::ClientContext* context, const ::Code& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Hash>* PrepareAsyncStoreCodeRaw(::grpc::ClientContext* context, const ::Code& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Code>* AsyncGetCodeRaw(::grpc::ClientContext* context, const ::Hash& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Code>* PrepareAsyncGetCodeRaw(::grpc::ClientContext* context, const ::Hash& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Error>* AsyncDeleteCodeRaw(::grpc::ClientContext* context, const ::Hash& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Error>* PrepareAsyncDeleteCodeRaw(::grpc::ClientContext* context, const ::Hash& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Hashes>* AsyncGetAllHashesRaw(::grpc::ClientContext* context, const ::User& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Hashes>* PrepareAsyncGetAllHashesRaw(::grpc::ClientContext* context, const ::User& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::AccessToken>* AsyncCheckTokenRaw(::grpc::ClientContext* context, const ::Token& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::AccessToken>* PrepareAsyncCheckTokenRaw(::grpc::ClientContext* context, const ::Token& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_AuthUser_;
    const ::grpc::internal::RpcMethod rpcmethod_RegUser_;
    const ::grpc::internal::RpcMethod rpcmethod_StoreCode_;
    const ::grpc::internal::RpcMethod rpcmethod_GetCode_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteCode_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAllHashes_;
    const ::grpc::internal::RpcMethod rpcmethod_CheckToken_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status AuthUser(::grpc::ServerContext* context, const ::User* request, ::Token* response);
    virtual ::grpc::Status RegUser(::grpc::ServerContext* context, const ::User* request, ::Token* response);
    virtual ::grpc::Status StoreCode(::grpc::ServerContext* context, const ::Code* request, ::Hash* response);
    virtual ::grpc::Status GetCode(::grpc::ServerContext* context, const ::Hash* request, ::Code* response);
    virtual ::grpc::Status DeleteCode(::grpc::ServerContext* context, const ::Hash* request, ::Error* response);
    virtual ::grpc::Status GetAllHashes(::grpc::ServerContext* context, const ::User* request, ::Hashes* response);
    virtual ::grpc::Status CheckToken(::grpc::ServerContext* context, const ::Token* request, ::AccessToken* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_AuthUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AuthUser() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_AuthUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AuthUser(::grpc::ServerContext* /*context*/, const ::User* /*request*/, ::Token* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAuthUser(::grpc::ServerContext* context, ::User* request, ::grpc::ServerAsyncResponseWriter< ::Token>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RegUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RegUser() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_RegUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegUser(::grpc::ServerContext* /*context*/, const ::User* /*request*/, ::Token* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegUser(::grpc::ServerContext* context, ::User* request, ::grpc::ServerAsyncResponseWriter< ::Token>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StoreCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StoreCode() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_StoreCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StoreCode(::grpc::ServerContext* /*context*/, const ::Code* /*request*/, ::Hash* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStoreCode(::grpc::ServerContext* context, ::Code* request, ::grpc::ServerAsyncResponseWriter< ::Hash>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCode() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCode(::grpc::ServerContext* /*context*/, const ::Hash* /*request*/, ::Code* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCode(::grpc::ServerContext* context, ::Hash* request, ::grpc::ServerAsyncResponseWriter< ::Code>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteCode() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_DeleteCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCode(::grpc::ServerContext* /*context*/, const ::Hash* /*request*/, ::Error* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteCode(::grpc::ServerContext* context, ::Hash* request, ::grpc::ServerAsyncResponseWriter< ::Error>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAllHashes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAllHashes() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetAllHashes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllHashes(::grpc::ServerContext* /*context*/, const ::User* /*request*/, ::Hashes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllHashes(::grpc::ServerContext* context, ::User* request, ::grpc::ServerAsyncResponseWriter< ::Hashes>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CheckToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CheckToken() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_CheckToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckToken(::grpc::ServerContext* /*context*/, const ::Token* /*request*/, ::AccessToken* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckToken(::grpc::ServerContext* context, ::Token* request, ::grpc::ServerAsyncResponseWriter< ::AccessToken>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_AuthUser<WithAsyncMethod_RegUser<WithAsyncMethod_StoreCode<WithAsyncMethod_GetCode<WithAsyncMethod_DeleteCode<WithAsyncMethod_GetAllHashes<WithAsyncMethod_CheckToken<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AuthUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_AuthUser() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::User, ::Token>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::User* request, ::Token* response) { return this->AuthUser(context, request, response); }));}
    void SetMessageAllocatorFor_AuthUser(
        ::grpc::experimental::MessageAllocator< ::User, ::Token>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::User, ::Token>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_AuthUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AuthUser(::grpc::ServerContext* /*context*/, const ::User* /*request*/, ::Token* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AuthUser(
      ::grpc::CallbackServerContext* /*context*/, const ::User* /*request*/, ::Token* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AuthUser(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::User* /*request*/, ::Token* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RegUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RegUser() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::User, ::Token>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::User* request, ::Token* response) { return this->RegUser(context, request, response); }));}
    void SetMessageAllocatorFor_RegUser(
        ::grpc::experimental::MessageAllocator< ::User, ::Token>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::User, ::Token>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RegUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegUser(::grpc::ServerContext* /*context*/, const ::User* /*request*/, ::Token* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RegUser(
      ::grpc::CallbackServerContext* /*context*/, const ::User* /*request*/, ::Token* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RegUser(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::User* /*request*/, ::Token* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_StoreCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_StoreCode() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::Code, ::Hash>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Code* request, ::Hash* response) { return this->StoreCode(context, request, response); }));}
    void SetMessageAllocatorFor_StoreCode(
        ::grpc::experimental::MessageAllocator< ::Code, ::Hash>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::Code, ::Hash>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_StoreCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StoreCode(::grpc::ServerContext* /*context*/, const ::Code* /*request*/, ::Hash* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* StoreCode(
      ::grpc::CallbackServerContext* /*context*/, const ::Code* /*request*/, ::Hash* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* StoreCode(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Code* /*request*/, ::Hash* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetCode() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::Hash, ::Code>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Hash* request, ::Code* response) { return this->GetCode(context, request, response); }));}
    void SetMessageAllocatorFor_GetCode(
        ::grpc::experimental::MessageAllocator< ::Hash, ::Code>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::Hash, ::Code>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCode(::grpc::ServerContext* /*context*/, const ::Hash* /*request*/, ::Code* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetCode(
      ::grpc::CallbackServerContext* /*context*/, const ::Hash* /*request*/, ::Code* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetCode(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Hash* /*request*/, ::Code* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeleteCode() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::Hash, ::Error>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Hash* request, ::Error* response) { return this->DeleteCode(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteCode(
        ::grpc::experimental::MessageAllocator< ::Hash, ::Error>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::Hash, ::Error>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCode(::grpc::ServerContext* /*context*/, const ::Hash* /*request*/, ::Error* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteCode(
      ::grpc::CallbackServerContext* /*context*/, const ::Hash* /*request*/, ::Error* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteCode(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Hash* /*request*/, ::Error* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetAllHashes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetAllHashes() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::User, ::Hashes>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::User* request, ::Hashes* response) { return this->GetAllHashes(context, request, response); }));}
    void SetMessageAllocatorFor_GetAllHashes(
        ::grpc::experimental::MessageAllocator< ::User, ::Hashes>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::User, ::Hashes>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetAllHashes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllHashes(::grpc::ServerContext* /*context*/, const ::User* /*request*/, ::Hashes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetAllHashes(
      ::grpc::CallbackServerContext* /*context*/, const ::User* /*request*/, ::Hashes* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetAllHashes(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::User* /*request*/, ::Hashes* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CheckToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CheckToken() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::Token, ::AccessToken>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Token* request, ::AccessToken* response) { return this->CheckToken(context, request, response); }));}
    void SetMessageAllocatorFor_CheckToken(
        ::grpc::experimental::MessageAllocator< ::Token, ::AccessToken>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::Token, ::AccessToken>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CheckToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckToken(::grpc::ServerContext* /*context*/, const ::Token* /*request*/, ::AccessToken* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CheckToken(
      ::grpc::CallbackServerContext* /*context*/, const ::Token* /*request*/, ::AccessToken* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CheckToken(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Token* /*request*/, ::AccessToken* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_AuthUser<ExperimentalWithCallbackMethod_RegUser<ExperimentalWithCallbackMethod_StoreCode<ExperimentalWithCallbackMethod_GetCode<ExperimentalWithCallbackMethod_DeleteCode<ExperimentalWithCallbackMethod_GetAllHashes<ExperimentalWithCallbackMethod_CheckToken<Service > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_AuthUser<ExperimentalWithCallbackMethod_RegUser<ExperimentalWithCallbackMethod_StoreCode<ExperimentalWithCallbackMethod_GetCode<ExperimentalWithCallbackMethod_DeleteCode<ExperimentalWithCallbackMethod_GetAllHashes<ExperimentalWithCallbackMethod_CheckToken<Service > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_AuthUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AuthUser() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_AuthUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AuthUser(::grpc::ServerContext* /*context*/, const ::User* /*request*/, ::Token* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RegUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RegUser() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_RegUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegUser(::grpc::ServerContext* /*context*/, const ::User* /*request*/, ::Token* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StoreCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StoreCode() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_StoreCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StoreCode(::grpc::ServerContext* /*context*/, const ::Code* /*request*/, ::Hash* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCode() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCode(::grpc::ServerContext* /*context*/, const ::Hash* /*request*/, ::Code* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteCode() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_DeleteCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCode(::grpc::ServerContext* /*context*/, const ::Hash* /*request*/, ::Error* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAllHashes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAllHashes() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetAllHashes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllHashes(::grpc::ServerContext* /*context*/, const ::User* /*request*/, ::Hashes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CheckToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CheckToken() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_CheckToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckToken(::grpc::ServerContext* /*context*/, const ::Token* /*request*/, ::AccessToken* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_AuthUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AuthUser() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_AuthUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AuthUser(::grpc::ServerContext* /*context*/, const ::User* /*request*/, ::Token* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAuthUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RegUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RegUser() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_RegUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegUser(::grpc::ServerContext* /*context*/, const ::User* /*request*/, ::Token* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StoreCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StoreCode() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_StoreCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StoreCode(::grpc::ServerContext* /*context*/, const ::Code* /*request*/, ::Hash* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStoreCode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCode() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCode(::grpc::ServerContext* /*context*/, const ::Hash* /*request*/, ::Code* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteCode() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_DeleteCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCode(::grpc::ServerContext* /*context*/, const ::Hash* /*request*/, ::Error* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteCode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAllHashes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAllHashes() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetAllHashes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllHashes(::grpc::ServerContext* /*context*/, const ::User* /*request*/, ::Hashes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllHashes(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CheckToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CheckToken() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_CheckToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckToken(::grpc::ServerContext* /*context*/, const ::Token* /*request*/, ::AccessToken* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckToken(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AuthUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_AuthUser() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AuthUser(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_AuthUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AuthUser(::grpc::ServerContext* /*context*/, const ::User* /*request*/, ::Token* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AuthUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AuthUser(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RegUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RegUser() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RegUser(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RegUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegUser(::grpc::ServerContext* /*context*/, const ::User* /*request*/, ::Token* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RegUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RegUser(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_StoreCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_StoreCode() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StoreCode(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_StoreCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StoreCode(::grpc::ServerContext* /*context*/, const ::Code* /*request*/, ::Hash* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* StoreCode(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* StoreCode(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetCode() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetCode(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCode(::grpc::ServerContext* /*context*/, const ::Hash* /*request*/, ::Code* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetCode(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetCode(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteCode() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteCode(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCode(::grpc::ServerContext* /*context*/, const ::Hash* /*request*/, ::Error* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeleteCode(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeleteCode(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetAllHashes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetAllHashes() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAllHashes(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetAllHashes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllHashes(::grpc::ServerContext* /*context*/, const ::User* /*request*/, ::Hashes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetAllHashes(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetAllHashes(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CheckToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CheckToken() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CheckToken(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CheckToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckToken(::grpc::ServerContext* /*context*/, const ::Token* /*request*/, ::AccessToken* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CheckToken(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CheckToken(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AuthUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AuthUser() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::User, ::Token>(std::bind(&WithStreamedUnaryMethod_AuthUser<BaseClass>::StreamedAuthUser, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_AuthUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AuthUser(::grpc::ServerContext* /*context*/, const ::User* /*request*/, ::Token* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAuthUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::User,::Token>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RegUser() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::User, ::Token>(std::bind(&WithStreamedUnaryMethod_RegUser<BaseClass>::StreamedRegUser, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RegUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegUser(::grpc::ServerContext* /*context*/, const ::User* /*request*/, ::Token* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::User,::Token>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StoreCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StoreCode() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::Code, ::Hash>(std::bind(&WithStreamedUnaryMethod_StoreCode<BaseClass>::StreamedStoreCode, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_StoreCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StoreCode(::grpc::ServerContext* /*context*/, const ::Code* /*request*/, ::Hash* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStoreCode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Code,::Hash>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetCode() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::Hash, ::Code>(std::bind(&WithStreamedUnaryMethod_GetCode<BaseClass>::StreamedGetCode, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCode(::grpc::ServerContext* /*context*/, const ::Hash* /*request*/, ::Code* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Hash,::Code>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteCode() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::Hash, ::Error>(std::bind(&WithStreamedUnaryMethod_DeleteCode<BaseClass>::StreamedDeleteCode, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteCode(::grpc::ServerContext* /*context*/, const ::Hash* /*request*/, ::Error* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteCode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Hash,::Error>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAllHashes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAllHashes() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::User, ::Hashes>(std::bind(&WithStreamedUnaryMethod_GetAllHashes<BaseClass>::StreamedGetAllHashes, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetAllHashes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAllHashes(::grpc::ServerContext* /*context*/, const ::User* /*request*/, ::Hashes* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAllHashes(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::User,::Hashes>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CheckToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CheckToken() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::Token, ::AccessToken>(std::bind(&WithStreamedUnaryMethod_CheckToken<BaseClass>::StreamedCheckToken, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CheckToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CheckToken(::grpc::ServerContext* /*context*/, const ::Token* /*request*/, ::AccessToken* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCheckToken(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Token,::AccessToken>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_AuthUser<WithStreamedUnaryMethod_RegUser<WithStreamedUnaryMethod_StoreCode<WithStreamedUnaryMethod_GetCode<WithStreamedUnaryMethod_DeleteCode<WithStreamedUnaryMethod_GetAllHashes<WithStreamedUnaryMethod_CheckToken<Service > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_AuthUser<WithStreamedUnaryMethod_RegUser<WithStreamedUnaryMethod_StoreCode<WithStreamedUnaryMethod_GetCode<WithStreamedUnaryMethod_DeleteCode<WithStreamedUnaryMethod_GetAllHashes<WithStreamedUnaryMethod_CheckToken<Service > > > > > > > StreamedService;
};


#endif  // GRPC_AppLayer_2eproto__INCLUDED
